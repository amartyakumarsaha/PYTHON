# -*- coding: utf-8 -*-
"""Python String.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JrpILnwH2sRGOjIsZ3aSiZsg1z7dZqej

# ***STORING A STRING IN A VARIABLE AND PRINT***
"""

s= 'Welcome to python string'
print(s)

s="I"m a python lover"
print(s)

s="I'm a python lover"
print(s)

"""# ***USE ''' ''' IF THERE IS A BREAK IN LINES***


"""

s='''I am an Engineer.
I love to code in PYTHON.
For the last 2 years I have been coding in PYTHON.'''

print(s)

"""'*' operator is used to print same thing multiple times."""

s="PYTHON"
print(s*3)
print(s*6)

"""*INDEXING* OF A STRING
--> There are two types of Indexing-
        1) Forward Indexing.
        2) Backward Indexing or Reverse Indexing.
"""

s='Google Collab'
print(s[0])    # For forward indexing index number starts with 0 from the first.
print(s[-1])   # For backward indexing index number starts with -1 from the back.

print(s[11]) # Here the 11th index in forward indexing is 'a'.
print(s[-2]) # Here the -2th index in backward indexing is 'a'.

"""# ***STRING*** ***SLICING***"""

print(s[:]) # It means the actual string will be printed.

print(s[:4]) # It means it will start printing from 0th index and print till (4-1)=3rd index

print(s[1:]) # It means from 1th index to the last index will be printed.

print(s[1:6]) # It means from index 1 to index (6-1)=5 will be printed.

print(s[-1:])

print(s[:-1]) # It means from 0th index to (-1-1)=-2th index will be printed.

print(s[::2]) # It means it will skip (2-1)=1 index and print the charecters.

print(s[::3]) # It means it will skip (3-1)=2 index and print the charecters.

print(s[1:8:2]) # It will start printing from index 1 to index(8-1)=7 by skipping (2-1)=1

"""# ***DIFFERNT STRING METHODS WITH EXAMPLE :-***

***capitalize***()
--> It capitalizes the first letter of a string.
"""

s='google collab'
print(s.capitalize())

"""***find()*** --> The find() method returns the lowest index of the substring if it is found in given string. If its is not found then it returns -1."""

s='Google Collab'
print(s.find('a'))

s='Google Collab'
print(s.find('oll'))

s='Google Collab'
print(s.find('x'))

s='Google Collab'
print(s.find('llb'))

s='Google Collab'
print(s.find('e coll'))

"""***index()*** --> It works just like find() but raises an exception if ‘str’ not found."""

s='Google Collab'
print(s.index('C'))

s='Google Collab'
print(s.index('g'))

s='Google Collab'
print(s.index('b'))

"""***isalnum()*** --> It returns true if a string has at least one character and all characters are alphanumeric, and false otherwise."""

s="collab2"
print(s.isalnum())

s="123456a"
print(s.isalnum())

s="123456aAc"
print(s.isalnum())

s="Google collab2"
print(s.isalnum())  # although here we have atleast one charecter but still it gave false because here we have space in between in the string.

"""***isalpha()*** --> It returns true if a string has at least one character and all characters are alphabetic, and false otherwise."""

s="Google"
print(s.isalpha())

s="Google2"      
print(s.isalpha())  # Returns False because 2 is not an alphabate

s="2Google" 
print(s.isalpha())

s="Google Collab"
print(s.isalpha())  # Returns False because of the <space> in between two words.

"""***isdigit()*** --> It returns true if a string contains only digits, and false otherwise."""

s='1'
print(s.isdigit())

s='1234'
print(s.isdigit())

s='12345A'
print(s.isdigit()) # Returns False because A is a letter.

s="A12345"
print(s.isdigit())

"""***islower()*** --> It returns true if a string has at least one cased character and all other characters are in lowercase, and false otherwise."""

s='GOOGLE'
print(s.islower())

s='GOOGLe'
print(s.islower())

s='Google'
print(s.islower())

s='google'
print(s.islower())

s='googlE'
print(s.islower())

s='google collab'
print(s.islower())

s='google Collab'
print(s.islower())

"""***isupper()*** --> It returns true if a string has at least one cased character and all other characters are in uppercase, and false otherwise."""

s="Google"
print(s.isupper())

s="Google Collab"
print(s.isupper())

s="GOOGLE COLLAB"
print(s.isupper())

s="GOOGLE"
print(s.isupper())

"""***len(string)*** --> It returns the length of a string."""

s="Google"
print(len(s))

s="Google Collab"
print(len(s))

s="Google 12345"
print(len(s))

"""***max(string)*** -->  It returns the highest alphabetical character in a string."""

s='Google'
print(max(s)) # It will return the letter who is highest.

s="aA"
print(max(s))

s="Google Collab"
print(max(s))

s="aba ABA"
print(max(s))

s="ABC"
print(max(s))

"""***min(string)*** --> that returns the lowest alphabetical character in a string."""

s='Google'
print(min(s)) # It will return the letter who is lowest.

s="aA"
print(min(s))

s="abaABA"
print(min(s))

"""***split(str)*** --> It is used to split strings in Python according to the delimiter str (space if not provided any) and returns the list of substrings in Python"""

s="Google Collab"
print(s.split())

s="Hello, I am an Engineer"
print(s.split())

s="Hello, I am an Engineer"
print(s.split(','))         # It means when the compiler find , then the split will be done.

s="How#are#you#?"
print(s.split('#'))

"""***count(str, beg= 0,end=len(string))*** --> It counts how many times ‘str’ occurs in a string or in the substring of a string if the starting index ‘beg’ and the ending index ‘end’ are given."""

s="aabba"
print(s.count('ab'))

s="aabbabba"
print(s.count('ab'))

s="aabbabba"
print(s.count('abba'))

s="aabbabba"
print(s.count('abb'))

s="aabbabba"
print(s.count('abb',2,6)) # It will check if aab is present in between the index 2 to (6-1)=5

"""***endswith(suffix, beg=0, end=len(string))*** --> It determines if a string or the substring of a string (if the starting index ‘beg’ and the ending index ‘end’ are given) ends with a suffix; it returns true if so, and false otherwise."""

s="Google Collab"
print(s.endswith('lab'))

s="Google Collab"
print(s.endswith('la'))

s="Google Collab"
print(s.endswith('la',8,12))

"""***encode(encoding=’UTF-8′,errors=’strict’)***--> It returns an encoded string version of a string; on error, the default is to raise a ValueError unless errors are given with ‘ignore’ or ‘replace’."""

s = "Google Collåbe"

print(s.encode(encoding="ascii",errors="backslashreplace")) # backslashreplace uses a backslash instead of the character that could not be encoded

s = "Google Collåbe"

print(s.encode(encoding="ascii",errors="namereplace")) # replaces the character with a text explaining the character

s = "Google Collåbe"

print(s.encode(encoding="ascii",errors="ignore")) # ignores the characters that cannot be encoded

s = "Google Collåbe"

print(s.encode(errors="strict")) # Default, raises an error on failure

s = "Google Collåbe"

print(s.encode(encoding="ascii",errors="replace")) # replaces the character with a questionmark

"""***expandtabs(tabsize=8)*** --> The expandtabs() takes an integer tabsize argument. The default tabsize is 8."""

s="Google\tCollab"
print(s.expandtabs())

s="Google\tCollab"
print(s.expandtabs(5))

s="Google\tCollab"
print(s.expandtabs(4))

"""***center(width,fillchar)*** --> It returns a space-padded string with the original string centered to."""

s="google collab"
print(s.center(20,'*'))

"""***format()*** -->"""

print("{} Collab".format("Google"))

print("Google {}".format("Collab"))

s="{} am a {} {}"
print(s.format("I","Python","Programmer"))

print("{0} am a {1} {2}".format("I","Python","Programmer"))

print("{0} to {g} {1} ".format("Welcome","Collab",g="Google"))

s="{0} am {1:d} years {2}"
print(s.format('I',23,'old'))

s="{0} scored {1:.2f}% in the {2}"
print(s.format('I',85.05,'exam'))

s="{0} weight is {1:.2f} {2}"
print(s.format('My',71.56,'kilogram'))

s="The {0} of {1} is {2:b}"
print(s.format("binary","100",100))

s="The {0} of {1} is {2:o}"
print(s.format("octal","100",100))

"""***upper()***--> upper() method returns the uppercased string from the given string. It converts all lowercase characters to uppercase."""

s="Google Collab"
print(s.upper())

s="GoOgLe CoLlAb"
print(s.upper())

s="google collab"
print(s.upper())

"""***lower()*** --> The string lower() method converts all uppercase characters in a string into lowercase characters and returns it."""

s="Google Collab"
print(s.lower())

s="GOOGLE COLLAB"
print(s.lower())

"""***swapcase()*** --> The string swapcase() method converts all uppercase characters to lowercase and all lowercase characters to uppercase characters of the given string, and returns it."""

s="GoOgLe CoLlAb"
print(s.swapcase())

s="i Am An EngIneeR"
print(s.swapcase())

"""***strip()*** --> The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed)."""

s="aaabbbaaa"
print(s.strip()) # The method returned same as the original string because I did not pass any argument that which charecter we want to remove.

s="aaabbbaaa"
print(s.strip('a')) # removed all a and return the string.

s="////\\\\Google//\\Collab/////\\\\"
print(s.strip("\/"))   # The method doesn't remove from the middle of any string.

"""***lstrip()*** --> The lstrip() method returns a copy of the string with leading characters removed (based on the string argument passed)."""

s="aaabbbaaa"
print(s.lstrip()) # The method returned same as the original string because I did not pass any argument that which charecter we want to remove.

s="aaabbbaaa"
print(s.lstrip('a')) # removed all a from left and return the string.

s="////\\\\Google//\\Collab/////\\\\"
print(s.lstrip("\/"))   # The method doesn't remove from the middle and right of any string.

"""***rstrip()*** --> The rstrip() method returns a copy of the string with trailing characters removed (based on the string argument passed)."""

s="aaabbbaaa"
print(s.rstrip()) # The method returned same as the original string because I did not pass any argument that which charecter we want to remove.

s="aaabbbaaa"
print(s.rstrip('a')) # removed all a from right and return the string.

s="////\\\\Google//\\Collab/////\\\\"
print(s.rstrip("\/"))   # The method doesn't remove from the middle and left of any string.

"""***replace()*** --> The replace() method returns a copy of the string where all occurrences of a substring is replaced with another substring."""

s="I Love To Code In Python."
print(s.replace('Love','Like'))

s="Hello World"
print(s.replace('Hello','Hi'))

"""***title()*** -->The title() method returns a string with first letter of each word capitalized; a title cased string."""

s="i love to code in python."
print(s.title())

s="i Love to Code in Python."
print(s.title())